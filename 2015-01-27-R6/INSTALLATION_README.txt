###############################################################
This Release:  2015-01-27-R6  (jnelson@qualys.com)

Change log:  1-27-2015   release 2015-01-27R6
- Fixed a typo when calling "strings" in vuln.sh.  Replaced "string" with "strings"
- Added additional status messages in CLI and additional log entries in transfer log
- Added support for using an exclusion tag in vuln.sh CURL call
- Added config item for exclusion tag in config.sh
- Added keep-alive 20 seconds parameters to the suggested CURL command syntax in config.sh

!IMPORTANT: - implementer/upgrader MUST comment out CURL call with tags and uncomment CURL without tags in vuln.sh if using calls without exclude tag
                     OR
            - implementer/upgrader MUST create the needed exclusion asset tag within asset management in QualysGuard and update the config.sh item 

See notes from 2014-08-15-R5 for further information


###############################################################
Last Release:  2014-08-15-R5  (jnelson@qualys.com)

Change log:  8/15/2014   release 2014-08-15-R5
- Updated output processes to ensure resulting files do not contain special characters.
    strings filename > output_file

See notes from 2014-03-13-R4 for further information


###############################################################
Past Release:  2014-03-13-R4  (jnelson@qualys.com)

Change log:  3/13/2014   release 2014-03-13-R4
- Added $DATESTAMPIT to conf.sh to make date based output subfoler a configurable option
      It defaults to use a date based subfolder for the output

See notes from 2014-03-11-R3 for further information


###############################################################
Past Release:  2014-03-11-R3  (jnelson@qualys.com)

Change log:  3/11/2014   release 2014-03-11-R3
*.sh - changed references to #!/bin/sh to #!/bin/bash for portability 
         note:  on some *nix platforms  /bin/sh != /bin/bash

See notes from 2014-03-10-R2 for further information

###############################################################
Past Release:  2014-03-10-R2   (jnelson@qualys.com)

change log:  3/10/2014   release 2014-03-10-R2
conf.sh
- $CURL now defaults to work without a root CA list for testing.  WARNING- Secure your $CURL settings as recommeded below!
- $APIFQDN default updated to US POD1
- Added NETBIOS folder with XSL template example that included only the fields "NETBIOS","QID","STATUS","LAST_FOUND","SEVERITY","CVE","TITLE"

See notes from 2014-03-07-R1 for further information

###############################################################
Past release:  2014-03-07-R1   (jnelson@qualys.com)

Change log: 3/7/2014  release:  2014-03-07-R1
Initial Vulnerability download API scripts were created by Qualys
vulnerability severity based API calls were created Matt Clancy <mclancy@qualys.com> 
Security enhancements with CURL and config as well as usability and optimizations added  by James Nelson <jnelson@qualys.com>
 * optional enhancements to CURL
   - CURL trusted CA inclusion
   - CURL require SSLv3
   - CURL require RC4-SHA or AES256-SHA
 * userID and password now read from CLI passed in as input - overridded by config.sh if options included
 * userID read from CLI passed in as input without password prompts for password securely - overridden by config.sh if options included
 * added routines for detection2csv.xsl dynamic build to permit date based output folders
 * replaced vuln1.sh, vuln2.sh, vuln3.sh, vuln4.sh, vuln5.sh with vuln.sh which reads input variables
 * added variable passing between go.sh and vuln.sh
 * enhanced output folder config use always use the date in the path
 * improved script status messages
 * improved script logging
 * CSV output enhanced to include additional fields
	- ID, IP, TRACKING_METHOD, DNS, RESULTS, LAST_SCAN_DATETIME
	Also still included fields:
	 - NETBIOS, QID, STATUS, LAST_FOUND, SEVERITY, CVE, TITLE


================================================================================================
For strong SSL security, a trusted root certificate bundle must be created on a system you trust.

Trusted CA bundle creation recommendation:
  1) On a Windows 7 x64 machine that is fully patched get the MinGWx64 edition of CURL from http://curl.haxx.se/download.html
  2) Create a .cmd with the following line:
        if not exist ca-bundle.crt cscript mk-ca-bundle.vbs
      save it and run it

For strong security, the CURL calls contained within this package must be updated to specify the SSL version, IP version, ciphers, and trusted root CA information.

For example:
curl -3 -4 --cacert ca-bundle.crt --ciphers RC4-SHA,AES256-SHA -u user:pass "https://....."

!!Adjust the CURL configuration in conf.sh

Manditory Setup process:
===============
1.0 - Edit conf.sh
	1.1) uncomment and update USERNAME (if planning to hardcode)
	1.2) uncomment and Update PASSWORD (if planning to hardcode)
        1.3) Verify APIFQDN settings are using the correct POD	
	1.4) After first run, update "LAST_CALL_DATE" so only vulns found after the date specified are downloaded
	1.5) Optionally update the "OUTPUTDIR" as desired

2.0 - Verify host platform commands - Verify the host platform has the following:
	2.1) /bin/sh
	2.2) source
	2.3) mkdir
	2.4) cURL
	2.5) xsltproc

3.0 - File permissions and execute bits - In the API extract folder: (example assumes /Qualys/API/)

	3.1) chown all related files to the desired user and group    
		Example:  chown -R root.root /Qualys/API/*


	3.2)  In the API extract folder, limit all file access.   
		Example:  chmod -R 660 /Qualys/API/*


	3.3)  In the API extract folder update execute bits on all shell scripts.  
		Example chmod +x *.sh


4.0 - Notes about running the API requests:
	Call the script as the user the files are owned by in the API folder!   
	The example used root and /Qualys/API
	For security, always clear the "PASSWORD" from the conf.sh after the script is finished running.
	
5.0 - How to try it out

cd /Qualys/API 

# note: replace <username> with your username, replace <password> with your password
./go.sh <username> <password>
Example: ./go.sh qualys Guard

# note: if you exclude a password you will be prompted
Example ./go.sh qualys
  Enter Password: Guard

# If you have insecurely hard coded account info into conf.sh the arguments are overwritten.  You can just call it with
./go.sh

