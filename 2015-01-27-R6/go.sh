#! /bin/bash
NUMARGS=$#
echo NUMARGS = $NUMARGS

# process username and password input
USERNAME=`echo $1`
echo USERNAME = $USERNAME

# when password not provided in CLI but username is, grab pass from a prompt
if [ $NUMARGS = 1 ]
 then
  unset password
  prompt="Enter Password : "
  while IFS= read -p "$prompt" -r -s -n 1 char
    do
      if [[ $char == $'\0' ]]
      then
	break
      fi
      prompt='*'
      password+="$char"
    done
    PASSWORD=`echo $password`
else
    PASSWORD=`echo $2`
fi

echo PASSWORD = *****not*a*chance********

# Load the configuration contained in conf.sh
# WARNING! This MAY include the qualysguard credentials - which will override CLI input
# MAKE SURE you use the correct API FQDN for your subscription
source ./conf.sh

# create output folder if it doesn't exist
if [ ! -d ${OUTPUTDIR} ]; then
	mkdir ${OUTPUTDIR}
	#chmod 700 -R ${OUTPUTDIR}
fi

if ([ "${DATESTAMPIT}" = NO ]); then
      echo DATESTAMPIT is ${DATESTAMPIT} - this is looks like NO
      echo Date based subfolder name in output path not requested in conf.sh
      OUTPUT=`echo ${OUTPUTDIR}`
   else
       echo DATESTAMPIT is ${DATESTAMPIT} - this is not NO so it is as good as YES
       echo Date based subfolder name in output path is requested in conf.sh
       if [ ! -d ${OUTPUTDIR}/${DATEPREFIX} ]; then
	  mkdir ${OUTPUTDIR}/${DATEPREFIX}
	  # chmod 700 -R ${OUTPUTDIR}/${DATEPREFIX}
	  OUTPUT=`echo ${OUTPUTDIR}/${DATEPREFIX}`
       fi
fi

STAMP=`echo ${DATEPREFIX}`

echo OUTPUT = $OUTPUT
echo STAMP = $STAMP

# Create $date_tranfers.log file
date > $OUTPUT/$STAMP\_transfers.log
echo "File created to record go.sh individual transactions" >> $OUTPUT/$STAMP\_transfers.log
echo "go.sh script launched" >> $OUTPUT/$STAMP\_transfers.log
echo 'Begin transaction record:' >> $OUTPUT/$STAMP\_transfers.log

# 08/04/11 MSC - breakup downloads into smaller chunks
# They currently breakup the downloads by severity.

# download vulnerability knowledgebase and store the ouput in vulnkb.xml
echo "Downloading the current QualysGuard Vulnerability Knowledgebase"
echo "Downloading the current QualysGuard Vulnerability Knowledgebase" >> $OUTPUT/$STAMP\_transfers.log
$CURL -H 'X-Requested-With: curl' -o $OUTPUT/vulnkb.xml -u ${USERNAME}:${PASSWORD} "https://$APIFQDN/msp/knowledgebase_download.php?show_cvss_submetrics=1&show_pci_flag=1"

# Write message to transfers.log file acknowledging successful KB download
echo '# Begin' >> $OUTPUT/$STAMP\_transfers.log
date >> $OUTPUT/$STAMP\_transfers.log
echo 'Successfully downloaded Qualys Knowledgebase' >> $OUTPUT/$STAMP\_transfers.log
echo '!! End' >> $OUTPUT/$STAMP\_transfers.log

# rewrite the vulnkb with only the required information: QID, TITLE, CVE_ID_LIST
# speeds up the process by a factor of 2
# the light kb is store in vulnkb-light.xml
echo Rewriting Vulnerability Knowledgebase to ligh KB containing QID, TITLE, CVE_ID_LIST
xsltproc --path . -o $OUTPUT/vulnkb-light.xml rewritekb.xsl $OUTPUT/vulnkb.xml

# Write message to $date_transfers.log file acknowledging successful xlstproc rewrite
echo '# Begin' >> $OUTPUT/$STAMP\_transfers.log
date >> $OUTPUT/$STAMP\_transfers.log
echo 'Successfully rewrote KB to vulnkb-light.xml file' >> $OUTPUT/$STAMP\_transfers.log
echo '!! End' >> $OUTPUT/$STAMP\_transfers.log

SEVERITY=`echo 5`

while [ $SEVERITY -gt 0 ]
  do
    # Launch other script to download Sev-$SEVERITY vulns:
    echo Get SEV-$SEVERITY Vulnerabilites
    echo Get SEV-$SEVERITY Vulnerabilities >> $OUTPUT/$STAMP\_transfer.log 
    ./vuln.sh $USERNAME $PASSWORD $SEVERITY $OUTPUT $STAMP
    ((SEVERITY-- ))
  done

# Write message to $date_transfers.log file acknowledging successful batch run
echo '# Begin' >> $OUTPUT/$STAMP\_transfers.log
date >> $OUTPUT/$STAMP\_transfers.log
echo 'Successful batch run of go.sh' >> $OUTPUT/$STAMP\_transfers.log
echo '!! End' >> $OUTPUT/$STAMP\_transfers.log


