		
		<xsl:choose>
			<xsl:when test="$vuln/CVE_ID_LIST/CVE_ID">
<!-- if there is at least one CVE -->

				<xsl:for-each select="$vuln/CVE_ID_LIST/CVE_ID">
		
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$cur/../../NETBIOS" />
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
		
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$cur/QID" />
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
			
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$cur/STATUS" />
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
					
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$cur/LAST_FOUND_DATETIME" />
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
		
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$vuln/SEVERITY_LEVEL" />
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
									
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="./ID"/>
					</xsl:call-template>
					<xsl:value-of select="$delim"/>
		
					<xsl:call-template name="display_csv_field">
						<xsl:with-param name="field" select="$vuln/TITLE" />
					</xsl:call-template>
											
					<xsl:value-of select="$linefeed" />
		
				</xsl:for-each>

			</xsl:when>
			
			<xsl:otherwise>
<!-- the QID doens't contain a CVE reference -->
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="../../NETBIOS" />
				</xsl:call-template>
				<xsl:value-of select="$delim"/>
		
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="QID" />
				</xsl:call-template>
				<xsl:value-of select="$delim"/>
		
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="STATUS" />
				</xsl:call-template>
				<xsl:value-of select="$delim"/>
				
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="LAST_FOUND_DATETIME" />
				</xsl:call-template>
				<xsl:value-of select="$delim"/>
		
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="$vuln/SEVERITY_LEVEL" />
				</xsl:call-template>
				<xsl:value-of select="$delim"/>
				
				<xsl:value-of select="$quote"/>
				<xsl:for-each select="$vuln/CVE_ID_LIST/CVE_ID">
					<xsl:value-of select="ID"/>
					<xsl:value-of select="$space"/>
				</xsl:for-each>
				<xsl:value-of select="$quote"/>
				<xsl:value-of select="$delim"/>
						
				<xsl:call-template name="display_csv_field">
					<xsl:with-param name="field" select="$vuln/TITLE" />
				</xsl:call-template>
				
				<xsl:value-of select="$linefeed" />
				
			</xsl:otherwise>

		</xsl:choose>
	
	</xsl:template>
		
  <!-- Template to escape csv field -->
	<xsl:template name="display_csv_field">
		<xsl:param name="field"/>
		<xsl:choose>
			<xsl:when test="contains($field,$quote)">
			<!-- Field contains a quote. We must enclose this field in quotes,
			and we must escape each of the quotes in the field value.
			-->
				<xsl:value-of select="$quote"/>
				<xsl:call-template name="escape_quotes">
					<xsl:with-param name="string" select="$field" />
				</xsl:call-template>
				<xsl:value-of select="$quote"/>
			</xsl:when>
			<xsl:when test="contains($field,',' ) or contains($field,$linefeed)">
			<!-- Field contains a comma and/or a linefeed.
			We must enclose this field in quotes.
			-->
				<xsl:value-of select="concat($quote,$field,$quote)"/>
			</xsl:when>
			<xsl:otherwise>
			<!-- No need to enclose this field in quotes.-->
				<xsl:value-of select="$field" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<!-- Helper for escaping CSV field -->
	<xsl:template name="escape_quotes">
		<xsl:param name="string" />
		<xsl:value-of select="substring-before($string,$quote)" />
		<xsl:value-of select="$quote"/>
		<xsl:value-of select="$quote"/>
		<xsl:variable name="substring_after_first_quote" select="substring-after($string,$quote)" />
		<xsl:choose>
			<xsl:when test="not(contains($substring_after_first_quote,$quote))">
				<xsl:value-of select="$substring_after_first_quote" />
			</xsl:when>
			<xsl:otherwise>
			<!-- The substring after the first quote contains a quote.
			So, we call ourself recursively to escape the quotes
			in the substring after the first quote.
			-->
				<xsl:call-template name="escape_quotes">
					<xsl:with-param name="string" select="$substring_after_first_quote"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
